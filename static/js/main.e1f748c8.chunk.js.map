{"version":3,"sources":["api/APIClient.ts","api/APIBase.ts","config/Environment.ts","util/randomNumberFromRange.ts","components/containers/PayerFormContainer.tsx","components/shared/Alert.tsx","App.tsx","components/screens/PayerFormScreen.tsx","serviceWorker.ts","index.tsx"],"names":["APIClient","id","this","_fetch","endpoint","method","alias","data","masterPlan","baseUrl","message","process","req","requestInit","headers","body","JSON","stringify","log","fetch","then","response","json","Environment","init","api","undefined","current","Screen","Alert","props","Toast","show","onClose","delay","autohide","Header","className","type","Body","useEffect","React","useState","Containers","PayerForm","unmatchedPlan","carrier_name","plan_name","Form","InputGroup","Prepend","Text","FormControl","aria-label","aria-describedby","value","readOnly","company_id","company_phone","Group","Control","as","selectedMatch","onChange","handleSelectMatch","masterPlans","map","plan","key","name","Button","variant","disabled","matchDisabled","matchLoading","style","marginRight","onClick","handleClickMatch","createInsuranceLoading","handleClickCreateInsurance","unmatchedPlanId","min","max","Error","Math","floor","random","randomNumberFromRange","loading","setLoading","setSelectedMatch","setMasterPlans","setUnmatchedPlan","setMatchDisable","setMatchLoading","setCreateInsuranceLoading","setAlertProps","alertProps","Promise","all","getMasterPlans","getUnmatchedPlan","resMasterPlans","resUnmatchedPlan","catch","error","finally","Spinner","animation","role","e","target","addAlias","unmatched_plan_id","master_plan_id","Number","addMasterPlan","App","Container","marginTop","Boolean","window","location","hostname","match","set","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.e1f748c8.chunk.js","sourcesContent":["import { Alias, API } from './API';\nimport { APIBase } from './APIBase';\n\nexport class APIClient extends APIBase implements API {\n  /**\n   * endpoint -> /unmatched-plans/:id\n   */\n  getUnmatchedPlan(id: number): Promise<any> {\n    return this._fetch({\n      endpoint: `unmatched-plans/${id}`,\n      method: 'GET',\n    });\n  }\n\n  /**\n   * endpoint -> master-plans\n   */\n  getMasterPlans(): Promise<any> {\n    return this._fetch({\n      endpoint: 'master-plans',\n      method: 'GET',\n    });\n  }\n\n  /**\n   * endpoint -> /aliases\n   * payload -> {\n      \"id\":1,\n      \"plan_name\":\"Faker Plan\",\n      \"carrier_name\":\"Roundtrip Insurance Company\",\n      \"unmatched_plan_id\":2,\n      \"master_plan_id\":1\n    }\n   */\n  addAlias(alias: Alias): Promise<any> {\n    return this._fetch({\n      endpoint: 'aliases',\n      method: 'POST',\n      data: alias,\n    });\n  }\n\n  /**\n   * endpoint -> /master-plans\n   * payload -> { name: 'Carrier Name Plan Name'}\n   */\n  addMasterPlan(masterPlan: { name: string }): Promise<any> {\n    return this._fetch({\n      endpoint: 'master-plans',\n      method: 'POST',\n      data: masterPlan,\n    });\n  }\n}\n","export type HTTPMethod = 'POST' | 'GET' | 'PUT' | 'PATCH' | 'DELETE';\n\nexport class APIBase {\n  private baseUrl: string;\n\n  constructor(baseUrl: string) {\n    this.baseUrl = baseUrl;\n  }\n\n  private log(message: string) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.log(message);\n    }\n  }\n\n  protected _fetch(req: {\n    endpoint: string;\n    method: HTTPMethod;\n    data?: any;\n  }): Promise<any> {\n    const requestInit: RequestInit = {\n      method: req.method,\n    };\n\n    if (\n      req.method === 'POST' ||\n      req.method === 'PUT' ||\n      req.method === 'PATCH'\n    ) {\n      requestInit.headers = { 'Content-Type': 'application/json' };\n      requestInit.body = JSON.stringify(req.data);\n    }\n\n    this.log(`\n    ---- REQUEST ----\n    url: ${this.baseUrl}/${req.endpoint}\n    method: ${req.method}\n    data: ${req.data ? JSON.stringify(req.data, null, 2) : 'N/A'}\n    `);\n\n    return fetch(`${this.baseUrl}/${req.endpoint}`, requestInit)\n      .then(response => response.json())\n      .then(json => {\n        this.log(`\n        ---- RESPONSE ----\n        response: ${JSON.stringify(json, null, 2)}\n        `);\n\n        return json;\n      });\n  }\n}\n","import { API } from '../api/API';\n\ninterface PaymentEnvironment {\n  api: API;\n}\n\nexport class Environment {\n  api: API;\n\n  static current: PaymentEnvironment;\n\n  static set(init: PaymentEnvironment) {\n    if (this.current === undefined) {\n      this.current = new this(init);\n    }\n  }\n\n  private constructor(init: PaymentEnvironment) {\n    this.api = init.api;\n  }\n}\n","/**\n * @param min Inclusive\n * @param max Inclusive\n * @returns Random integer from min to max\n */\nexport const randomNumberFromRange = (min: number, max: number) => {\n  if (min >= max) {\n    throw new Error(\n      'The first argument must be less than the second argument.'\n    );\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n","import * as React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { Environment } from '../../config/Environment';\nimport { randomNumberFromRange } from '../../util/randomNumberFromRange';\nimport { Alert, AlertProps } from '../shared/Alert';\n\nconst { useEffect, useState } = React;\n\ninterface UnmatchedPlan {\n  id: number;\n  plan_name: string;\n  carrier_name: string;\n  company_id: string;\n  company_street_address: string;\n  company_city: string;\n  company_state: string;\n  company_zip: string;\n  company_country: string;\n  company_phone: string;\n  effective_date: string;\n  display_name: string;\n}\n\nexport interface PayerFormProps {\n  /** populates select options */\n  masterPlans: {\n    id: number;\n    name: string;\n  }[];\n  /** select value state */\n  selectedMatch: string;\n  /** match button state */\n  matchDisabled: boolean;\n  matchLoading: boolean;\n  /** create insurance button state */\n  createInsuranceLoading: boolean;\n  /** unmatched plan from API */\n  unmatchedPlan: UnmatchedPlan | undefined;\n  /** Change handler */\n  handleSelectMatch: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n  /** match click handler */\n  handleClickMatch: () => void;\n  /** create insurance click handler */\n  handleClickCreateInsurance: () => void;\n}\n\n/**\n * Higher Order Component that connects purely presentational component to state/business logic\n * @param Screen PayerFormScreen\n * @returns Connected Component\n */\nexport const payerFormContainer = (\n  Screen: React.ComponentType<PayerFormProps>\n) => () => {\n  // Generate unmatched plan id to fetch from random number\n  const unmatchedPlanId = randomNumberFromRange(1, 4);\n\n  const { api } = Environment.current;\n\n  // initial data fetch state\n  const [loading, setLoading] = useState(false);\n\n  // select dropdown state\n  const [selectedMatch, setSelectedMatch] = useState('');\n\n  // options from API\n  const [masterPlans, setMasterPlans] = useState<\n    { id: number; name: string }[]\n  >([]);\n\n  // current user state\n  const [unmatchedPlan, setUnmatchedPlan] = useState<\n    UnmatchedPlan | undefined\n  >();\n\n  // match button state\n  const [matchDisabled, setMatchDisable] = useState(false);\n  const [matchLoading, setMatchLoading] = useState(false);\n\n  // create insurance button state\n  const [createInsuranceLoading, setCreateInsuranceLoading] = useState(false);\n\n  // Alert\n  const [alertProps, setAlertProps] = useState<AlertProps>({\n    type: undefined,\n    message: undefined,\n    show: false,\n    onClose: () => {\n      setAlertProps({\n        ...alertProps,\n        show: false,\n      });\n    },\n  });\n\n  // fetch data needed for screen\n  useEffect(() => {\n    setLoading(true);\n\n    // make API calls concurrently\n    Promise.all([api.getMasterPlans(), api.getUnmatchedPlan(unmatchedPlanId)])\n      .then(([resMasterPlans, resUnmatchedPlan]) => {\n        setMasterPlans(resMasterPlans);\n        setUnmatchedPlan(resUnmatchedPlan);\n      })\n      .catch(error => {\n        // show Alert\n        setAlertProps({\n          ...alertProps,\n          type: 'Error',\n          message: error,\n          show: true,\n        });\n      })\n      .finally(() => setLoading(false));\n\n    // Only fetch once when component mounts\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Disable button until option is selected\n  useEffect(() => {\n    setMatchDisable(selectedMatch === '');\n  }, [selectedMatch]);\n\n  // POST new alias\n  const handleClickMatch = () => {\n    setMatchLoading(true);\n    // assert unmatchedPlan !== undefined because clickHandler\n    // is only available if it is defined\n    api\n      .addAlias({\n        plan_name: unmatchedPlan?.plan_name!,\n        carrier_name: unmatchedPlan?.carrier_name!,\n        unmatched_plan_id: unmatchedPlan?.id!,\n        master_plan_id: Number(selectedMatch),\n      })\n      .then(() => {\n        // Alert\n        setAlertProps({\n          ...alertProps,\n          type: 'Success',\n          message: 'Your match has been submitted.',\n          show: true,\n        });\n      })\n      .catch(error => {\n        // show Alert\n        setAlertProps({\n          ...alertProps,\n          type: 'Error',\n          message: error,\n          show: true,\n        });\n      })\n      .finally(() => {\n        setMatchLoading(false);\n      });\n  };\n\n  // POST new master plan\n  const handleClickCreateInsurance = () => {\n    setCreateInsuranceLoading(true);\n\n    if (unmatchedPlan) {\n      api\n        .addMasterPlan({\n          name: `${unmatchedPlan?.carrier_name} ${unmatchedPlan?.plan_name}`,\n        })\n        .then(() => {\n          // show Alert success\n          setAlertProps({\n            ...alertProps,\n            type: 'Success',\n            message: 'Insurance successfully created.',\n            show: true,\n          });\n        })\n        .catch(error => {\n          // ALERT error\n          setAlertProps({\n            ...alertProps,\n            type: 'Error',\n            message: error,\n            show: true,\n          });\n        })\n        .finally(() => {\n          setCreateInsuranceLoading(false);\n        });\n    } else {\n      // Alert\n      setAlertProps({\n        ...alertProps,\n        type: 'Error',\n        message: 'The form is incomplete',\n        show: true,\n      });\n    }\n  };\n\n  return loading ? (\n    <Spinner animation=\"border\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </Spinner>\n  ) : (\n    <>\n      <Alert {...alertProps} />\n      <Screen\n        masterPlans={masterPlans}\n        matchDisabled={matchDisabled}\n        matchLoading={matchLoading}\n        createInsuranceLoading={createInsuranceLoading}\n        unmatchedPlan={unmatchedPlan}\n        selectedMatch={selectedMatch}\n        handleSelectMatch={e => setSelectedMatch(e.target.value)}\n        handleClickMatch={handleClickMatch}\n        handleClickCreateInsurance={handleClickCreateInsurance}\n      />\n    </>\n  );\n};\n","import * as React from 'react';\nimport Toast from 'react-bootstrap/Toast';\n\nexport type AlertProps = {\n  type: string | undefined;\n  message: string | undefined;\n  show: boolean;\n  onClose: () => void | undefined;\n};\n\nexport const Alert = (props: AlertProps) => {\n  return (\n    <Toast\n      show={props.show}\n      onClose={props.onClose}\n      delay={3000}\n      autohide={true}\n    >\n      <Toast.Header>\n        <strong className=\"mr-auto\">{props.type}</strong>\n      </Toast.Header>\n      <Toast.Body>{props.message}</Toast.Body>\n    </Toast>\n  );\n};\n","import * as React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport { payerFormContainer } from './components/containers/PayerFormContainer';\nimport { PayerFormScreen } from './components/screens/PayerFormScreen';\n\nconst Containers = {\n  PayerForm: payerFormContainer(PayerFormScreen),\n};\n\nexport const App = () => {\n  return (\n    <Container style={{ marginTop: '2rem' }}>\n      <Containers.PayerForm />\n    </Container>\n  );\n};\n","import * as React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { PayerFormProps } from '../containers/PayerFormContainer';\n\nexport const PayerFormScreen = (props: PayerFormProps) => {\n  return (\n    <>\n      <h2>\n        {props.unmatchedPlan?.carrier_name} {props.unmatchedPlan?.plan_name}\n      </h2>\n      <Form>\n        {/* Carrier and plan name */}\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"carrier-and-plan-name\">\n              Carrier and plan name:\n            </InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl\n            aria-label=\"Carrier and plan name\"\n            aria-describedby=\"carrier-and-plan-name\"\n            type=\"text\"\n            value={`${props.unmatchedPlan?.carrier_name} ${props.unmatchedPlan?.plan_name}`}\n            readOnly={true}\n          />\n        </InputGroup>\n\n        {/* Company Id */}\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"company-id\">Company Id:</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl\n            aria-label=\"Company Id\"\n            aria-describedby=\"company-id\"\n            type=\"text\"\n            value={props.unmatchedPlan?.company_id}\n            readOnly={true}\n          />\n        </InputGroup>\n\n        {/* Phone number */}\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"company-phone\">Phone number:</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl\n            aria-label=\"Phone number\"\n            aria-describedby=\"company-phone\"\n            type=\"text\"\n            value={props.unmatchedPlan?.company_phone}\n            readOnly={true}\n          />\n        </InputGroup>\n\n        {/* Match */}\n        <Form.Group>\n          <Form.Control\n            as=\"select\"\n            value={props.selectedMatch}\n            onChange={props.handleSelectMatch}\n          >\n            <option value=\"\">Select</option>\n            {/* Plans from API */}\n            {props.masterPlans.map(plan => (\n              <option key={plan.id} value={plan.id}>\n                {plan.name}\n              </option>\n            ))}\n          </Form.Control>\n        </Form.Group>\n\n        <Button\n          variant=\"light\"\n          disabled={props.matchDisabled || props.matchLoading}\n          style={{ marginRight: '1rem' }}\n          onClick={props.handleClickMatch}\n        >\n          {props.matchLoading ? 'Loading...' : 'Match'}\n        </Button>\n        <Button\n          variant=\"primary\"\n          disabled={props.createInsuranceLoading}\n          onClick={props.handleClickCreateInsurance}\n        >\n          {props.createInsuranceLoading ? 'Loading...' : 'Create Insurance'}\n        </Button>\n      </Form>\n    </>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { APIClient } from './api/APIClient';\nimport { App } from './App';\nimport { Environment } from './config/Environment';\nimport * as serviceWorker from './serviceWorker';\n\nfunction start() {\n  Environment.set({\n    api: new APIClient(process.env.REACT_APP_API_URL!),\n  });\n\n  ReactDOM.render(<App />, document.getElementById('root'));\n}\n\nstart();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}